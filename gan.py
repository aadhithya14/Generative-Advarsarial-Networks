# -*- coding: utf-8 -*-
"""GAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15OrmCEIruPxg_kgm_VZClV7Vg8OsYSuT
"""

import torch
from torch import nn
from tqdm.auto import tqdm
from torchvision import transforms
from torchvision.datasets import MNIST
from torchvision.utils import make_grid
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
torch.manual_seed(0)

class Generator(nn.Module):
    def __init__(self, z_dim=10, im_chan=1, hidden_dim=64,final_layer=False):
        super(Generator, self).__init__()
        self.z_dim=z_dim
        self.gen=nn.Sequential(
            self.make_gen_block(z_dim,hidden_dim*4),
            self.make_gen_block(hidden_dim*4,hidden_dim*2,kernel_size=4,stride=1),
            self.make_gen_block(hidden_dim*2,hidden_dim),
            self.make_gen_block(hidden_dim,im_chan,kernel_size=4,final_layer=True),
        )

    def make_gen_block(self, input_channels, output_channels, kernel_size=3, stride=2, final_layer=False):
        if not final_layer:
            return nn.Sequential(
                nn.ConvTranspose2d(input_channels,output_channels,kernel_size,stride),
                nn.BatchNorm2d(output_channels),
                nn.ReLU(inplace=True),
            )

        else:
            return nn.Sequential(
                nn.ConvTranspose2d(input_channels,output_channels,kernel_size,stride),
                nn.Tanh(),
            )
    
    def forward(self,noise):
        x=noise.view(len(noise),self.z_dim,1,1)
        return self.gen(x)

class Critic(nn.Module):
    def __init__(self,im_chan=1,hidden_dim=64):
        super(Critic,self).__init__()
        self.crit=nn.Sequential(
            self.make_crit_block(im_chan,hidden_dim),
            self.make_crit_block(hidden_dim,hidden_dim*2),
            self.make_crit_block(hidden_dim*2,1,final_layer=True),
        )

    def make_crit_block(self,input_channels,output_channels,kernel_size=4,stride=2,final_layer=False):
        if not final_layer:
            return nn.Sequential(
                nn.Conv2d(input_channels,output_channels,kernel_size,stride),
                nn.BatchNorm2d(output_channels),
                nn.LeakyReLU(0.2,inplace=True),
            )
        else:
            return nn.Sequential(
                nn.Conv2d(input_channels,output_channels,kernel_size,stride),  
            )
        
    def forward(self,im_chan):
        crit_pred=self.crit(im_chan)
        return crit_pred.view(len(crit_pred), -1)

def get_noise(n_samples, z_dim, device='cpu'):
    '''
    Function for creating noise vectors: Given the dimensions (n_samples, z_dim)
    creates a tensor of that shape filled with random numbers from the normal distribution.
    Parameters:
      n_samples: the number of samples to generate, a scalar
      z_dim: the dimension of the noise vector, a scalar
      device: the device type
    '''
    return torch.randn(n_samples, z_dim, device=device)

n_epochs = 100
z_dim = 64
display_step = 50
batch_size = 128
lr = 0.0002
beta_1 = 0.5
beta_2 = 0.999
c_lambda = 10
crit_repeats = 5
device = 'cuda'

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,)),
])

dataloader = DataLoader(
    MNIST('.', download=True, transform=transform),
    batch_size=batch_size,
    shuffle=True)

gen=Generator(z_dim).to(device)
gen_opt=torch.optim.Adam(gen.parameters(),lr=lr,betas=(beta_1,beta_2))
crit=Critic().to(device)
crit_opt=torch.optim.Adam(crit.parameters(),lr=lr,betas=(beta_1,beta_2))
def weight_init(m):
    if isinstance(m,nn.Conv2d) or isinstance(m,nn.ConvTranspose2d):
        torch.nn.init.normal_(m.weight,0.0,0.02)
    if isinstance(m,nn.BatchNorm2d):
        torch.nn.init.normal_(m.weight,0.0,0.02)
        torch.nn.init.constant_(m.bias,0.0)

gen=gen.apply(weight_init)
crit=crit.apply(weight_init)

def get_gradient(crit,real,fake,epsilon):

    mixed_images=real*epsilon+fake*(1-epsilon)
    mixed_scores=crit(mixed_images)

    grad=torch.autograd.grad(
         inputs=mixed_images,
         outputs=mixed_scores,
         grad_outputs=torch.ones_like(mixed_scores),
         create_graph=True,
         retain_graph=True,
    )[0]

    return grad

def graded_penalty(gradient):
    gradient=gradient.view(len(gradient),-1)
    grad_norm=gradient.norm(2,dim=1)
    grad_penalty=torch.mean((grad_norm-1)**2)
    return grad_penalty

def get_gen_loss(crit_fake_pred):
    gen_loss=-torch.mean(crit_fake_pred)
    return gen_loss

def get_crit_loss(crit_fake_pred,crit_real_pred,gp,c_lambda):
    crit_loss=torch.mean(crit_fake_pred-crit_real_pred)+gp*c_lambda
    return crit_loss

def show_tensor_images(image_tensor, num_images=25, size=(1, 28, 28)):
    '''
    Function for visualizing images: Given a tensor of images, number of images, and
    size per image, plots and prints the images in an uniform grid.
    '''
    image_tensor = (image_tensor + 1) / 2
    image_unflat = image_tensor.detach().cpu()
    image_grid = make_grid(image_unflat[:num_images], nrow=5)
    plt.imshow(image_grid.permute(1, 2, 0).squeeze())
    plt.show()

def make_grad_hook():
    '''
    Function to keep track of gradients for visualization purposes, 
    which fills the grads list when using model.apply(grad_hook).
    '''
    grads = []
    def grad_hook(m):
        if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):
            grads.append(m.weight.grad)
    return grads, grad_hook

print(device)





cur_step=0
generator_losses=[]
critic_losses=[]
PATH = "model.pt"
for epoch in range(n_epochs):
    for real,_ in tqdm(dataloader):
        cur_batch_size=len(real)
        real=real.to(device)
        mean_iteration_critic_loss=0
        for _ in range(crit_repeats):
            crit_opt.zero_grad()
            fake_noise=get_noise(cur_batch_size,z_dim,device=device)
            fake_image=gen(fake_noise)
            crit_fake_pred=crit(fake_image.detach())
            crit_real_pred=crit(real)

            epsilon=torch.rand(len(real),1,1,1,device=device,requires_grad=True)
            gradient=get_gradient(crit,real,fake_image,epsilon)
            gp=graded_penalty(gradient)
            crit_loss=get_crit_loss(crit_fake_pred,crit_real_pred,gp,c_lambda)
            mean_iteration_critic_loss += crit_loss.item() / crit_repeats
            crit_loss.backward()
            crit_opt.step()

        critic_losses += [mean_iteration_critic_loss]

        gen_opt.zero_grad()
        fake_noise_2=get_noise(cur_batch_size,z_dim,device)
        fake_image=gen(fake_noise_2)
        crit_fake_pred=crit(fake_image)
        gen_loss=get_gen_loss(crit_fake_pred)
        gen_loss.backward()
        gen_opt.step()
        generator_losses += [gen_loss.item()]

        if cur_step % display_step == 0 and cur_step > 0:
            gen_mean = sum(generator_losses[-display_step:]) / display_step
            crit_mean = sum(critic_losses[-display_step:]) / display_step
            print(f"Step {cur_step}: Generator loss: {gen_mean}, critic loss: {crit_mean}")
            show_tensor_images(fake_image)
            show_tensor_images(real)
            step_bins = 20
            num_examples = (len(generator_losses) // step_bins) * step_bins
            plt.plot(
                range(num_examples // step_bins), 
                torch.Tensor(generator_losses[:num_examples]).view(-1, step_bins).mean(1),
                label="Generator Loss"
            )
            plt.plot(
                range(num_examples // step_bins), 
                torch.Tensor(critic_losses[:num_examples]).view(-1, step_bins).mean(1),
                label="Critic Loss"
            )
            plt.legend()
            plt.show()

        cur_step += 1
    if epoch%10==0:
      torch.save({
              'epoch': epoch + 1,
              'generator_state_dict': gen.state_dict(),
              'critic_state_dict': crit.state_dict(),
              'gen_optimizer': gen_opt.state_dict(),
              'crit_optimizer':crit_opt.state_dict(),
          },PATH)



from google.colab import files
PATH = "model.pt"
checkpoint = torch.load(PATH)
gen.load_state_dict(checkpoint['generator_state_dict'])
crit.load_state_dict(checkpoint['critic_state_dict'])
gen_opt.load_state_dict(checkpoint['gen_optimizer'])
crit_opt.load_state_dict(checkpoint['crit_optimizer'])
epoch = checkpoint['epoch']
files.download(PATH)





